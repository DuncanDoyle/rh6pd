package org.jbpm.evaluation.carinsurance;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.drools.KnowledgeBase;
import org.drools.builder.KnowledgeBuilder;
import org.drools.builder.KnowledgeBuilderFactory;
import org.drools.builder.ResourceType;
import org.drools.io.ResourceFactory;

import org.drools.runtime.StatefulKnowledgeSession;
import org.drools.runtime.process.ProcessInstance;
import org.h2.command.ddl.CreateAggregate;
import org.jbpm.task.TaskService;
import org.jbpm.task.query.TaskSummary;
import org.jbpm.test.JbpmJUnitTestCase;
import org.junit.Ignore;
import org.junit.Test;


public class QuoteTest extends JbpmJUnitTestCase {
	
	public QuoteTest(){
			super(true);
			setPersistence(true);
	}
	
    @Test
    public void testProcess() 
    { 
        //KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();                
        //kbuilder.add(ResourceFactory.newClassPathResource("Quote.bpmn"), ResourceType.BPMN2);
        //kbuilder.add(ResourceFactory.newClassPathResource("calcDriverRisk.gdst"), ResourceType.);
        //KnowledgeBase kbase = kbuilder.newKnowledgeBase();
        StatefulKnowledgeSession ksession = createKnowledgeSession(Quote.bpmn"); 
        
        TaskService taskService = getTaskService(ksession);
       
        Map<String, Object> params = new HashMap<String, Object>();   
        params.put("validQuote", true);
        ProcessInstance processInstance = ksession.startProcess("org.jbpm.evaluation.carinsurance.quote", params);
        ksession.fireAllRules();
        
        //reateKnowledgeSession("org.jbpm.evaluation.carinsurance.quote");
        
        List<TaskSummary> tasks = taskService.getTasksAssignedAsPotentialOwner("mary", "en-UK");
        assertEquals(1, tasks.size());
        long taskId = tasks.get(0).getId();
        taskService.start(taskId, "admin");
        taskService.complete(taskId, "admin", null);

        tasks = taskService.getTasksAssignedAsPotentialOwner("admin", "en-UK");
        assertEquals(1, tasks.size());
        taskId = tasks.get(0).getId();
        taskService.start(taskId, "admin");
        taskService.complete(taskId, "admin", null);
        System.out.println("Found task " + tasks.get(0).getName());
        
        
        assertNodeTriggered(processInstance.getId(), "StartProcess");
        assertNodeTriggered(processInstance.getId(), "CalcDriverRisk");
        assertNodeTriggered(processInstance.getId(), "Gateway", "Get Car");
       
    }
    
}